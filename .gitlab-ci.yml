
stages:
  - terraform_validate
  - docker_image_build
  - terraform_plan
  - terraform_apply


## to create the env variable for AWS access
.aws_profile: &aws_profile
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=ap-southeast-2


## just checking
Terraform validate:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: terraform_validate
  script:
    - cd terraform
    - terraform init -backend=false
    - terraform fmt
    - terraform validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'


## builing a docker inside a docker! yes, that reminds of the movie Inception :D
### this builds the docker image for the provided flask app and registers it to AWS ECR
#### the stage will only run if any changes made to the docker file or app
Build docker image:
  image: docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  stage: docker_image_build
  before_script:
    - *aws_profile
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin <account id>.dkr.ecr.ap-southeast-2.amazonaws.com
    - aws ecr describe-repositories --repository-names my_flask_app || aws ecr create-repository --repository-name my_flask_app
    - cd docker
    - docker build -t my_flask_app .
    - docker tag my_flask_app:latest <account id>.dkr.ecr.ap-southeast-2.amazonaws.com/my_flask_app:latest
    - docker push <account id>.dkr.ecr.ap-southeast-2.amazonaws.com/my_flask_app:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
          - docker/*


## lets plan!
### does the tf plan and creates tfplan artifact for later stage
Terraform plan:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: terraform_plan
  before_script:
    - *aws_profile
  script:
    - cd terraform
    - terraform init
    - terraform plan -out=my_flask_app.tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - terraform/my_flask_app.tfplan


## i applied for a job
### grabs the artifact tfplan from previous stage and applies
Terraform apply:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: terraform_apply
  before_script:
    - *aws_profile
  script:
    - cd terraform
    - terraform init
    - terraform apply -input=false my_flask_app.tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  dependencies:
    - "Terraform plan"
